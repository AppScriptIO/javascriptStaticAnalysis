"use strict";const path = require('path'),
{ registerPluginPathToRequireHook } = require('./requireHook.js');







module.exports.templateConfig = {
  root: true,
  overrides: [] };



module.exports.serverSideEnvironment = ({
  basePath,
  babelConfigPath = './configuration/serverSideBabel.config.js', typescriptConfigPath = './configuration/typescript.config.json', shouldRegisterModulePath = true } = {}) => {
  if (shouldRegisterModulePath) registerPluginPathToRequireHook();

  let typescriptEslintRecommended = require('@typescript-eslint/eslint-plugin/dist/configs/recommended.json');
  let prettierTypescriptEslint = require('eslint-config-prettier/@typescript-eslint');
  let prettierConfig = require('./prettier.config.js');


  const vscodeBuildInFormater = {

    files: ['**.json', '**.jsonc'],
    plugins: ['eslint-plugin-json'],
    env: {
      node: true } };



  let nodejsFile = {
    files: ['**.js'],

    parser: 'babel-eslint',
    parserOptions: {
      babelOptions: {
        configFile: babelConfigPath } },


    plugins: [
    'eslint-plugin-babel',
    'prettier'],

    rules: {

      'prettier/prettier': [
      'warn',
      prettierConfig,
      {
        usePrettierrc: true }] },



    env: {
      node: true } };



  let typescriptFile = {
    files: ['**.ts'],

    parser: '@typescript-eslint/parser',
    parserOptions: {
      ecmaVersion: 2018,
      sourceType: 'module',
      project: typescriptConfigPath },

    plugins: ['@typescript-eslint/eslint-plugin', 'prettier'],
    rules: Object.assign(
    typescriptEslintRecommended.rules,

    prettierTypescriptEslint.rules,

    {
      'prettier/prettier': 'warn' }),


    env: {
      node: true } };




  let overrides = [

  vscodeBuildInFormater,
  nodejsFile,
  typescriptFile];


  if (basePath)
  for (let config of overrides)
  if (config.files) config.files = config.files.map(item => path.join(basePath, item));


  let eslintConfig = {
    root: true,
    overrides };






  return eslintConfig;
};

module.exports.clientSideEnvironment = ({
  basePath,
  babelConfigPath = './configuration/clientSideBabel.config.js', shouldRegisterModulePath = true } =
{}) => {
  if (shouldRegisterModulePath) registerPluginPathToRequireHook({

    additionalNodeModulePath: [path.join(path.dirname(require.resolve('@open-wc/eslint-config/package.json')), 'node_modules')] });






























































































  return Object.assign(require('@open-wc/eslint-config'), { parserOptions: {
      babelOptions: {
        configFile: babelConfigPath } } });



};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,